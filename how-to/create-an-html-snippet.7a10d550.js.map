{"mappings":"AGeO,MAAM,EAAe,CAC1B,IACA,UACA,UACA,QACA,aACA,SACA,UACA,UACA,SACA,KACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,SACA,MACA,QACA,QACA,SACA,KACA,OACA,OACA,MACA,KACA,SACA,SACA,UACA,IACA,MACA,WACA,SACA,SACA,UACA,QACA,KACA,WACA,QACA,KACA,QACA,KACD,CClEY,EAAyB,AAAC,IACrC,IAAM,EAAY,SAAS,aAAa,CAAC,OAEzC,OADA,EAAU,SAAS,CAAG,EAAW,IAAI,GAC9B,CACT,EFDa,EAA6B,KAExC,IAAM,EAAgB,EAAE,CAMxB,IAAK,IAAI,KAHY,MAAM,IAAI,CAAC,SAAS,aAAa,CAAC,QAAQ,QAAQ,EAGrC,CAChC,IAAM,EAAO,EAAc,GACvB,GACF,EAAc,IAAI,CAAC,EAEvB,CAEA,OAAO,CACT,EAEM,EAAiB,AAAC,GACf,AAAkB,IAAlB,EAAK,QAAQ,CAGhB,EAAc,AAAC,GACZ,EAAA,EAAe,IAClB,AAAA,EAAa,QAAQ,CAAC,EAAK,OAAO,CAAC,WAAW,IAI9C,EAAgB,AAAC,IAErB,IAAI,EAAO,CACT,IAAK,EAAQ,OAAO,CAAC,WAAW,GAChC,SAAU,EAAE,AACd,EAIA,IAAK,IAAI,KADQ,EAAQ,QAAQ,CAE3B,EAAY,IAEd,EAAK,QAAQ,CAAC,IAAI,CAAC,EAAc,IAQrC,GAJ6B,IAAzB,EAAK,QAAQ,CAAC,MAAM,EACtB,OAAO,EAAK,QAAQ,CAGlB,AAAa,WAAb,EAAK,GAAG,CACV,OAAO,CAEX,EAEM,EAAgB,AAAC,IACrB,IAAM,EAAW,GAAM,UAAY,EAAE,CAErC,GAAI,GAAU,SAAW,EACvB,MAAO,CAAC,KAAK,EAAE,EAAK,GAAG,CAAC,MAAM,CAAC,CAIjC,IAAI,EAAe,GACnB,IAAK,IAAM,KAAS,EAClB,GAAgB,EAAc,GAGhC,MAAO,CAAC;;mBAES,EAAE,EAAK,GAAG,CAAC;UACpB,EAAE,EAAa;;EAEvB,CAAC,AACH,EAEa,EAAiB,AAAC,IAC7B,IAAI,EAAa,GAGjB,IAAK,IAAM,KAAQ,EACjB,GAAc,EAAc,GAG9B,OAAO,AAAA,EAAuB,EAChC,EDlFE,AAAA,CAAA,UACA,IAAM,EAAgB,AAAA,IAChB,EAAY,SAAS,oBAAoB,CAAC,OAAO,CAAC,EAAE,CAC1D,GAAI,EAAW,CACb,IAAM,EAAS,AAAA,EAAe,GAE9B,EAAU,WAAW,CAAC,EACxB,CACF,CAAA","sources":["<anon>","src/tools/html-validation.js","src/tools/js/browser-validation.js","src/tools/config.js","src/tools/js/utils.js"],"sourcesContent":["const $915797ddba216d87$export$e506a1d27d1eaa20 = {\n    viewport: {\n        desktop: {\n            width: 1920,\n            height: 1080,\n            scrolled: 30000\n        },\n        mobile: {\n            width: 1080,\n            height: 2400,\n            scrolled: 30000\n        }\n    }\n};\nconst $915797ddba216d87$export$53e35183e981bb54 = [\n    \"a\",\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"blockquote\",\n    \"button\",\n    \"caption\",\n    \"details\",\n    \"dialog\",\n    \"dd\",\n    \"dl\",\n    \"dt\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"img\",\n    \"input\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"main\",\n    \"menu\",\n    \"nav\",\n    \"ol\",\n    \"option\",\n    \"output\",\n    \"picture\",\n    \"p\",\n    \"pre\",\n    \"progress\",\n    \"search\",\n    \"select\",\n    \"summary\",\n    \"table\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"ul\"\n];\n\n\nconst $b7287c60edb8cc00$export$9d6916c6d69555ab = (htmlString)=>{\n    const container = document.createElement(\"div\");\n    container.innerHTML = htmlString.trim();\n    return container;\n};\n\n\nconst $ba1be0843368ada7$export$2211f29e18d9fac8 = ()=>{\n    // Initialize an empty array to store the parsed elements\n    const treeStructure = [];\n    // Get all elements in the document\n    const rootElements = Array.from(document.querySelector(\"body\").children);\n    // Process each root element\n    for (let element of rootElements){\n        const tree = $ba1be0843368ada7$var$buildHtmlTree(element);\n        if (tree) treeStructure.push(tree);\n    }\n    return treeStructure;\n};\nconst $ba1be0843368ada7$var$isValidElement = (node)=>{\n    return node.nodeType === 1;\n};\nconst $ba1be0843368ada7$var$isValidNode = (node)=>{\n    return $ba1be0843368ada7$var$isValidElement(node) ? (0, $915797ddba216d87$export$53e35183e981bb54).includes(node.tagName.toLowerCase()) : false;\n};\nconst $ba1be0843368ada7$var$buildHtmlTree = (element)=>{\n    // Initialize an object to represent this element\n    let tree = {\n        tag: element.tagName.toLowerCase(),\n        children: []\n    };\n    // Recursively process each child element\n    const children = element.children;\n    for (let child of children)if ($ba1be0843368ada7$var$isValidNode(child)) // Only process elements (ignore text, comments, etc.)\n    tree.children.push($ba1be0843368ada7$var$buildHtmlTree(child));\n    if (tree.children.length === 0) delete tree.children;\n    if (tree.tag !== \"script\") return tree;\n};\nconst $ba1be0843368ada7$var$generateTrees = (tree)=>{\n    const children = tree?.children || [];\n    // Base case: if there are no children, return a div with just the tag name\n    if (children?.length === 0) return `<div>${tree.tag}</div>`;\n    // Recursive case: create a details element with a summary and nested details\n    let childrenHtml = \"\";\n    for (const child of children)childrenHtml += $ba1be0843368ada7$var$generateTrees(child);\n    return `\n      <details>\n          <summary>${tree.tag}</summary>\n          ${childrenHtml}\n      </details>\n  `;\n};\nconst $ba1be0843368ada7$export$4972db2450399ff = (treeStructure)=>{\n    let htmlOutput = \"\";\n    // Handle the case of multiple root elements\n    for (const tree of treeStructure)htmlOutput += $ba1be0843368ada7$var$generateTrees(tree);\n    return (0, $b7287c60edb8cc00$export$9d6916c6d69555ab)(htmlOutput);\n};\n\n\n(async ()=>{\n    const treeStructure = (0, $ba1be0843368ada7$export$2211f29e18d9fac8)();\n    const container = document.getElementsByTagName(\"body\")[0];\n    if (container) {\n        const schema = (0, $ba1be0843368ada7$export$4972db2450399ff)(treeStructure);\n        container.appendChild(schema);\n    }\n})();\n\n\n//# sourceMappingURL=create-an-html-snippet.7a10d550.js.map\n","import {\n  parseHtmlDocumentInBrowser,\n  generateSchema,\n} from '/src/tools/js/browser-validation.js'\n;(async () => {\n  const treeStructure = parseHtmlDocumentInBrowser()\n  const container = document.getElementsByTagName('body')[0]\n  if (container) {\n    const schema = generateSchema(treeStructure)\n\n    container.appendChild(schema)\n  }\n})()\n","import { treeElements } from '/src/tools/config.js'\nimport { htmlStringToDomElement } from '/src/tools/js/utils.js'\n\nexport const parseHtmlDocumentInBrowser = () => {\n  // Initialize an empty array to store the parsed elements\n  const treeStructure = []\n\n  // Get all elements in the document\n  const rootElements = Array.from(document.querySelector('body').children)\n\n  // Process each root element\n  for (let element of rootElements) {\n    const tree = buildHtmlTree(element)\n    if (tree) {\n      treeStructure.push(tree)\n    }\n  }\n\n  return treeStructure\n}\n\nconst isValidElement = (node) => {\n  return node.nodeType === 1\n}\n\nconst isValidNode = (node) => {\n  return isValidElement(node)\n    ? treeElements.includes(node.tagName.toLowerCase())\n    : false\n}\n\nconst buildHtmlTree = (element) => {\n  // Initialize an object to represent this element\n  let tree = {\n    tag: element.tagName.toLowerCase(),\n    children: [],\n  }\n\n  // Recursively process each child element\n  const children = element.children\n  for (let child of children) {\n    if (isValidNode(child)) {\n      // Only process elements (ignore text, comments, etc.)\n      tree.children.push(buildHtmlTree(child))\n    }\n  }\n\n  if (tree.children.length === 0) {\n    delete tree.children\n  }\n\n  if (tree.tag !== 'script') {\n    return tree\n  }\n}\n\nconst generateTrees = (tree) => {\n  const children = tree?.children || []\n  // Base case: if there are no children, return a div with just the tag name\n  if (children?.length === 0) {\n    return `<div>${tree.tag}</div>`\n  }\n\n  // Recursive case: create a details element with a summary and nested details\n  let childrenHtml = ''\n  for (const child of children) {\n    childrenHtml += generateTrees(child)\n  }\n\n  return `\n      <details>\n          <summary>${tree.tag}</summary>\n          ${childrenHtml}\n      </details>\n  `\n}\n\nexport const generateSchema = (treeStructure) => {\n  let htmlOutput = ''\n\n  // Handle the case of multiple root elements\n  for (const tree of treeStructure) {\n    htmlOutput += generateTrees(tree)\n  }\n\n  return htmlStringToDomElement(htmlOutput)\n}\n","export const config = {\n  viewport: {\n    desktop: {\n      width: 1920,\n      height: 1080,\n      scrolled: 30000,\n    },\n    mobile: {\n      width: 1080,\n      height: 2400,\n      scrolled: 30000,\n    },\n  },\n}\n\nexport const treeElements = [\n  'a',\n  'address',\n  'article',\n  'aside',\n  'blockquote',\n  'button',\n  'caption',\n  'details',\n  'dialog',\n  'dd',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'img',\n  'input',\n  'label',\n  'legend',\n  'li',\n  'main',\n  'menu',\n  'nav',\n  'ol',\n  'option',\n  'output',\n  'picture',\n  'p',\n  'pre',\n  'progress',\n  'search',\n  'select',\n  'summary',\n  'table',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'ul',\n]\n","export const htmlStringToDomElement = (htmlString) => {\n  const container = document.createElement('div')\n  container.innerHTML = htmlString.trim()\n  return container\n}\n"],"names":["$915797ddba216d87$export$53e35183e981bb54","$b7287c60edb8cc00$export$9d6916c6d69555ab","htmlString","container","document","createElement","innerHTML","trim","$ba1be0843368ada7$export$2211f29e18d9fac8","treeStructure","element","Array","from","querySelector","children","tree","$ba1be0843368ada7$var$buildHtmlTree","push","$ba1be0843368ada7$var$isValidElement","node","nodeType","$ba1be0843368ada7$var$isValidNode","includes","tagName","toLowerCase","tag","child","length","$ba1be0843368ada7$var$generateTrees","childrenHtml","$ba1be0843368ada7$export$4972db2450399ff","htmlOutput","getElementsByTagName","schema","appendChild"],"version":3,"file":"create-an-html-snippet.7a10d550.js.map"}